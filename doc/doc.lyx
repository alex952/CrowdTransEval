#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine natbib_numerical
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\topmargin 2.5cm
\bottommargin 2.5cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CROWDTRANSEVAL: A TOOLKIT FOR EVALUATING MACHINE TRANSLATION SYSTEM BY USING
 CROWDSOURCING
\end_layout

\begin_layout Author
ALEJANDRO NAVARRO FULLEDA 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset

 
\series bold
TUTOR:
\series default
 JUAN ANTONIO PÉREZ ORTIZ 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash

\backslash

\end_layout

\end_inset

 
\series bold
DEPARTAMENTO
\series default
: LSI 
\series bold
CURSO
\series default
: 5º
\end_layout

\begin_layout Abstract
This project presents a tool that helps to automate evaluation of machine
 translation systems which provide a web API, such as Apertium, using crowdsourc
ing techniques reporting results that help the task of extracting results
 from them.
 Those results are in terms of the quality of each service compared with
 the other ones in the translation task itself and giving information about
 quality of the people working on the task created for this puroposes as
 well.
 The resultant information given by the program is created using the average
 of fluency and adequacy for each service and the results proposed by the
 workers, those last for creating statistical measures of inter-agreement
 between workers.
\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
El documento se divide en dos partes diferenciadas.
 La primera parte introduce el proyecto y comenta aspectos técnicos del
 proyecto, junto con un pequeño manual de uso.
 La segunda parte, sin embargo, se escribe a modo de tutorial acerca del
 uso de la API de CrowdFlower y de cómo se pueden crear trabajos de crowdsourcin
g usando esta plataforma usando cualquier lenguaje de programación que permita
 llamadas a servicios web.
\end_layout

\begin_layout Standard
Las parte que describe el proyecto de manera general y su propósito, al
 igual que esta introducción, están escritas en español con motivo de la
 entrega del proyecto al servicio de la Escuela Politécnica para la corrección
 del proyecto de Sistemas Informáticos.
 Sin embargo, el resto del documento se ha decidido que sea en inglés para
 poder ayudar a un mayor rango de personas que quieran usar este documento
 como una guía explicativa acerca del uso del servicio CrowdFlower para
 la creación de tareas programáticamente usando su API de servicio.
\end_layout

\begin_layout Part
Application
\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
Este proyecto está enfocado a la evaluación de traductores automáticos usando
 técnicas de crowdsourcing.
 Para poder realizar esto se ha creado una herramienta automática que crea
 los elementos necesarios, tales como tareas y unidades, para realizar la
 evaluación.
\end_layout

\begin_layout Standard
A pesar de que existen muchas cosas que podemos evaluar de las salidas de
 los traductores automáticos, nosotros en este proyecto nos centramos en
 la evaluación de la adecuación y la fluidez de las traducciones aportadas
 por los mismos.
\end_layout

\begin_layout Standard
La evaluación de sistemas de traducción automática no es nada sencilla,
 ni barata, si usamos las formas de evaluación usadas tradicionalmente,
 como son los traductores expertos.
 Estos traductores expertos nos aportarán unas medidas sobre lo adecuadas
 que son las traducciones aportadas por los sistemas de traducción automática,
 siendo posteriormente contrastadas con las opiniones de los demás expertos
 y formando una opinión sólida con respecto a la comparación de los distintos
 sistemas de traducción.
 Sin embargo, pagar a varios traductores especializados no es nada barato
 y las evaluaciones de los mismos requieren bastante tiempo.
\end_layout

\begin_layout Standard
La opción más usada actualmente para resolver tareas del tipo HIT
\begin_inset Foot
status open

\begin_layout Plain Layout
Human Intelligence Tasks
\end_layout

\end_inset

 es usar los sistemas crowdsourcing.
 Estos sistemas utilizan mano de obra humana, pudiendo estar esta situada
 en cualquier parte del mundo, para tomar decisiones simples que unidas
 forman una evaluación completa.
 A esta mano de obra normalmente se paga una baja cantidad por unidad completada
 o por hora trabajada en la tarea completa.
 Esta forma de actuar nos permite tener a millones de potenciales trabajadores
 que aporten pequeñas cantidades de soluciones a tareas concretas, que tengan
 conocimiento par realizar, con las que podremos crear una solución completa
 y llegar a conclusiones similares, tanto en fiabilidad como en calidad,
 a las de las tomadas por los expertos traductores.
 Además de que estos trabajos
\begin_inset Foot
status open

\begin_layout Plain Layout
Usando la nomenclatura de 
\emph on
Jobs
\emph default
 que usa CrowdFlower
\end_layout

\end_inset

 son mucho más baratos que contratar a un conjunto de traductores expertos
 en la materia.
 Pero esta manera de trabajar también tiene sus inconvenientes, inicialmente
 no conocemos a ninguno de los trabajadores empleados en nuestra tarea de
 evaluación por lo que las respuestas que realizan cada uno de ellos pueden
 no ser igual de confiables.
 Para tener en cuenta también la fiabilidad del evaluador existen ciertos
 mecanismos que nos permiten saber si el evaluador está tratando de ganar
 dinero fácil contestando cualquier cosa en las preguntas de la tarea e
 incluso si se puede llegar a confundir en alguna pregunta porque no es
 del todo experto en el tema que se le está preguntando.
 Hablaremos un poco más en profundidad de este tema en la parte dedicada
 a los Gold Standards.
\end_layout

\begin_layout Standard
Amazon es uno de los proveedores líderes de este tipo de servicios con su
 herramienta Mechanical Turk
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://www.mturk.com"

\end_inset


\end_layout

\end_inset

 (MTurk).
 Una gran desventaja del servicio es que para poder introducir trabajos
 a realizar por usuarios de MTurk es necesario disponer de una dirección
 estadounidense a la que ellos puedan emitir una factura.
 Debido a ese motivo, nos hemos decantado por el uso de una herramienta
 intermediaria que proporciona algunas ventajas añadidas con respecto al
 uso directo de MTurk; se trata de CrowdFlower
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "https://crowdflower.com"

\end_inset


\end_layout

\end_inset

 (CF).
 Además de MTurk, CF puede trabajar de pasarela con otros servicios de crowdsour
cing dándonos la posibilidad de agrupar juicios de varios de estos servicios
 en uno solo (aunque este no será nuestro caso, dado que únicamente vamos
 a utilizar MTurk como servicio de crowdsourcing).
\end_layout

\begin_layout Standard
En este documento se van a tratar los pasos seguidos durante el desarrollo
 del proyecto, sirviendo estos tanto para los que quieran realizar un uso
 de la plataforma CF como para explicar el proyecto desarrollado en sí.
 Los siguientes conceptos van a utilizarse a lo largo del documento:
\end_layout

\begin_layout Enumerate

\series bold
Jobs (trabajos)
\series default
: en CF representan la tarea de tipo HIT que vamos a encargar a los usuarios
 de MTurk.
 Contiene información básica de trabajo, como su nombre, descripción, instruccio
nes del trabajo, además de otros datos usados en la ejecución del trabajo
 en la plataforma MTurk.
 Un dato importante que se genera al crear el trabajo en CF es el identificador
 del mismo, dato que usaremos para realizar cualquier operación relacionada
 con ese trabajo en particular.
\end_layout

\begin_layout Enumerate

\series bold
Unit (unidad):
\series default
 en este caso se trata de la unidad atómica que representa una pregunta
 de la tarea (job).
 No tiene por qué corresponderse con un único valor aportado por el trabajador,
 sino que pueden tratarse de preguntas que requieran más de una respuesta
 por parte del mismo, ya que el trabajo puede requerir la resolución de
 varias preguntas para contestar una unidad del trabajo.
 En nuestro caso, una unidad representará una frase en la lengua origen
 (LO) traducida a la lengua meta (LM) por los distintos traductores automáticos.
 Por cada traductor se requerirá de la evaluación de la adecuación y fluidez
 de la traducción en forma de ranking de 
\shape italic
cero
\shape default
 a 
\shape italic
cinco
\shape default
.
 Por tanto, si usamos dos traductores automáticos el trabajador deberá tomar
 
\series bold
\shape italic
cuatro
\series default
\shape default
 decisiones.
\end_layout

\begin_layout Enumerate

\series bold
Judgment (juicio)
\series default
: definimos juicio como cada una de las decisiones tomadas en una unidad
 por cada uno de los trabajadores a los que fue presentada (puede ser presentada
 varias veces al mismo evaluador) y que no fue rechazado por los criterios
 de aceptación de CF.
 Cada uno de estos juicios tendrá todos los valores por los que se preguntó
 en la unidad al usuario, permitiéndonos saber las puntuaciones elegidas
 por el mismo en la unidad en la que trabajó.
\end_layout

\begin_layout Enumerate

\series bold
Gold Standard
\series default
: es la manera con la que CF rechaza a los trabajadores que o bien no están
 preparados para responder a la tarea o están resolviéndola de una manera
 poco fiable.
 Se trata de unidades enmascaradas de las que ya conocemos los resultados
 y que se presentan a los evaluadores de manera automática intercaladas
 con las unidades normales.
 Si este tipo de unidades no se responden con la respuesta esperada, con
 la que fueron creadas, el evaluador será avisado de su error y bajará la
 confianza en el mismo, siendo posible el rechazo de todos sus juicios en
 esa tarea si se responden erróneamente varias de estas unidades.
\end_layout

\begin_layout Subsection
Tecnologías usadas en el proyecto
\begin_inset CommandInset label
LatexCommand label
name "sub:technical-aspects"

\end_inset


\end_layout

\begin_layout Standard
La tecnología usada para el desarrollo del proyecto ha sido Java
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://www.java.com"

\end_inset


\end_layout

\end_inset

 acompañado de la herramienta 
\emph on
Maven
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://maven.apache.org"

\end_inset


\end_layout

\end_inset

 para la gestión del ciclo de vida del proyecto y de sus dependencias.
 Además, dado que el API de CF es de tipo REST
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://es.wikipedia.org/wiki/Representational_State_Transfer"

\end_inset


\end_layout

\end_inset

, en el proyecto se hace uso de la biblioteca 
\emph on
Jersey
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://jersey.java.net"

\end_inset


\end_layout

\end_inset

 de código libre usada para el manejo de las llamadas a los distintos servicios
 web REST.
 Para el manejo de datos en formato JSON, usado por el tanto por el API
 como para la representación de distintos elementos en el código, usamos
 una biblioteca llamada 
\emph on
Jackson
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://jackson.codehaus.org/"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
El proyecto CrowdTransEval está licenciado mediante GPLv2 y se puede encontrar
 en Github
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
https://github.com/alex952/CrowdTransEval
\end_layout

\end_inset

.
\end_layout

\begin_layout Section
Application manual
\end_layout

\begin_layout Standard
The project is delivered in an executable JAR file with all the needed code
 and libraries embedded within it.
 The use is very simple, it's run in the terminal by issuing the command
 shown in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "run-app"

\end_inset

.
 So far, the program only uses Bing and Apertium translation services in
 the process.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "run-app.sh"
lstparams "breaklines=true,caption={Command to run the project},captionpos=b,frame=shadowbox,label={run-app},language=sh"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Executing it with the -h option will print out the help information, no
 matter what goes after or before it.
 All parameters shown below are needed for the correct execution of the
 program and have to be provided with the command:
\end_layout

\begin_layout Itemize
-cf: this parameter stands for configuration file, it has to be in a java
 properties file form, and, as the name says, contains all the parameters
 needed by the services and the program itself.
 Those are:
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
CrowdFlowerKey
\series default
: the key provided by the CF service to use with their API.
\end_layout

\begin_layout Itemize

\series bold
SL
\series default
: source language of the translations.
\end_layout

\begin_layout Itemize

\series bold
TL
\series default
: target language of the translations.
\end_layout

\begin_layout Itemize

\series bold
ApertiumKey
\series default
: API key of the Apertium translation service.
\end_layout

\begin_layout Itemize

\series bold
BingClientId
\series default
: client id provided by Microsoft when a user registers as a developer in
 its platform.
\end_layout

\begin_layout Itemize

\series bold
BingClientSecret
\series default
: application secret provided when an application is registered in the Microsoft
 platform as a developer.
 This application must have been defined to use the Microsoft Bing Translator
 service.
\end_layout

\begin_layout Itemize

\series bold
ShuffleGrade
\series default
: this is the shuffle grade used in the gold standard creation stage of
 the program.
 First the shuffler splits the sentences in blocks and then shuffles those
 blocks the number of times set by this parameter.
 Its value must be between 1 and 5, and the default is 2.
 The value used for this parameter is important because if your sentences
 are commonly large you may want to put a higher value than if you had shorter
 ones.
 This is totally up to the final user.
\end_layout

\begin_layout Itemize

\series bold
Channels
\series default
: this parameter represents the channels the job will be casted to.
 The possible values are amt, iphone, mob, sama.
 The important ones are amt, that stands for Amazon MTurk, and mob, that
 stands for MobMerge and it's the internal interface of CF that is normally
 used for testing porpuses, and where you can solve your own jobs going
 to the url provided in the 
\emph on
Overview
\emph default
 tab of the newly created job.
 If there is a need of publishing the job in more than one channel, the
 multiple values would be separated with a comma.
\end_layout

\end_deeper
\begin_layout Itemize
-pf: this is the parameter for the parameters file.
 It has to be in a Java properties file form as well, and the keys inside
 of it are the ones used in the job creation that are the ones in the API
 reference 
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://crowdflower.com/docs/api/jobs.html"

\end_inset


\end_layout

\end_inset

.
 E.g.: if our job name for the task is 
\emph on
My first Job
\emph default
 this would be set under the key 
\series bold
title
\series default
.
 But there's more parameters, such as judgments_per_unit or units_per_page,
 which are defined later in the Jobs section (
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Jobs"

\end_inset

).
\end_layout

\begin_layout Itemize
-g: this text file is used by the application to upload gold data to the
 job.
 Its format is a loop of these three lines:
\end_layout

\begin_deeper
\begin_layout Itemize
Fist it has to include a sentence to translate.
\end_layout

\begin_layout Itemize
Later there is a reference translation in the target language.
 This will be sent to the job as is.
\end_layout

\begin_layout Itemize
Lastly the file has the correct translation in the target language.
 The program will choose one of the available translation services and assign
 the correct answer to that service, for being able to determine which sentence
 is the correct one among all the translation.
 On the other hand, the rest of the services will have a shuffled version
 of the correct translation, making no sense for someone that can understand
 the target language.
 This is used to detect people who don't even understand the target language
 and the are filling the job only for the money.
\end_layout

\end_deeper
\begin_layout Itemize
-sl: this is also a simple text file containing a one-per-line sentence
 to be translated.
\end_layout

\begin_layout Itemize
-rt: a text file in the same format that the 
\emph on
lo
\emph default
 file which has a translation of reference for each sentence of the 
\emph on
lo
\emph default
 file.
\end_layout

\begin_layout Itemize
-c: perhaps the most important parameter.
 It's a switch that says to the application that a job is going to be created.
\end_layout

\begin_layout Itemize
-d [id]: this switch tells the application to monitor the job with the 
\emph on
id
\emph default
 provided for gathering its results when it's finished.
 When it goes along with the -c switch it doesn't need to be followed by
 the job id and performs the same task after the job is created.
\end_layout

\begin_layout Itemize
-df: when the daemon mode is set, this can be used to control the check
 frequency against the server.
 The default value for this parameter is 10 seconds.
\end_layout

\begin_layout Standard
The program will print a log to the console when important actions are performed
 to inform the user of them.
 If the daemon mode is set when the job finishes the results will be fetched
 and the program will build both an html file with conclusions and a csv
 file with the results per unit with the following format: for each unit
 a line will be printed with the ID of the unit, the source language sentence,
 reference translation and the judgments of that unit.
 Those judgments will be preceded by a number that stands for the number
 of judgments, and for each judgment the line will show the worker's ID
 and both fluency and adequacy for each translation service.
\end_layout

\begin_layout Subsection
Execution examples
\end_layout

\begin_layout Standard
We are showing here some actual examples of the the program.
\end_layout

\begin_layout Standard
If we want to create a job we will need a configuration file with the general
 configuration of the application (Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "config-properties-example"

\end_inset

), the parameters file (Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "parameters-properties-example"

\end_inset

) with the specific settings of the job and the files where are defined
 the sentences to be translated (Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "sl-file-example"

\end_inset

), along with the reference translations file (Listing ), and the gold standards
 (Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "gold-file-example"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "config/config.properties"
lstparams "breaklines=true,caption={Config file example},captionpos=b,frame=shadowbox,label={config-properties-example}"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "config/parameters.properties"
lstparams "breaklines=true,caption={Parameters file example},captionpos=b,frame=shadowbox,label={parameters-properties-example}"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "config/lo.txt"
lstparams "breaklines=true,caption={Source language file example},captionpos=b,frame=shadowbox,label={sl-file-example}"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "config/tr.txt"
lstparams "breaklines=true,caption={Reference translations file example},captionpos=b,frame=shadowbox,label={rt-file-example}"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "config/gold.txt"
lstparams "breaklines=true,caption={Gold file example},captionpos=b,frame=shadowbox,label={gold-file-example}"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With all these files we can now use the program to create the job using
 the application, as shown in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "create-job-example"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "config/create-job-example.sh"
lstparams "breaklines=true,caption={Job creation through application example},captionpos=b,frame=shadowbox,label={create-job-example},language=sh"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
I that example the daemon is not set, so when the job is finally created
 after the whole process the application will exit.
 After this we can relaunch the application with the options for the daemon,
 just to check the job state and fetch the results when finished, as shown
 in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "daemon-job-example"

\end_inset

.
 As you can see when invoking the daemon mode the config file is still needed
 due to the CF API key definition inside of it.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "config/daemon-job-example.sh"
lstparams "breaklines=true,caption={Daemon mode example},captionpos=b,frame=shadowbox,label={daemon-job-example},language=sh"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Part
Project explanation
\end_layout

\begin_layout Section
CrowdFlower API
\end_layout

\begin_layout Standard
To accomplish the project purpose we are going to use the CF REST API
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://crowdflower.com/docs/api"

\end_inset


\end_layout

\end_inset

, with the tools explained in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:technical-aspects"

\end_inset

.
 The API is not even nearly perfect, but it is a handy tool to interact
 with the CF service and make the service behave as we need for our coding.
 Therefore every step in the project has been a small step with a lot of
 research and 
\emph on
trial and error
\emph default
 behind it.
 The API reference documentation has some weak points where not all the
 information is properly explained.
 Nevertheless our choice was CF from the beginning because there were no
 other good choices.
\end_layout

\begin_layout Standard
Along with a detailed explanation of the methods used in this project, we
 are serving a handful of examples, some of them using the 
\series bold
cURL
\series default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://curl.haxx.se"

\end_inset


\end_layout

\end_inset

 tool, to demonstrate the use of the API.
 To use any of the developer capabilities, together with an account in CF,
 we need an API key obtained from the account administration panel of your
 user in CF, located in the upper right corner of the web page (as shown
 in Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-account-button"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cf-account-button.jpg
	width 60page%
	rotateOrigin center

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
CrowdFlower account button.
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "cf-account-button"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In this panel you can generate a new API key, in case you don't have already
 one, and grab that long string that will appear (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-api-key"

\end_inset

), which we will need to attach to every request to the API.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cf-api-key.jpg
	width 60page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
CrowFlower API key
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "cf-api-key"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Jobs
\begin_inset CommandInset label
LatexCommand label
name "sec:Jobs"

\end_inset


\end_layout

\begin_layout Standard
As I have explained before, a Job is a task to be performed by crowdsourcing
 workers in CF terms.
 Therefore it must have some attributes that define the Job itself and the
 way the Job must be processed and evaluated while it's in progress.
 These are some of the most important attributes in a Job definition:
\end_layout

\begin_layout Itemize

\series bold
Title
\series default
: it must have a title.
\end_layout

\begin_layout Itemize

\series bold
Description
\series default
: the description must be concise and has to define in a few words the purpose
 of the task.
\end_layout

\begin_layout Itemize

\series bold
Instructions
\series default
: a few words on what the workers need to understand, apart from the title
 or the description of the task.
\end_layout

\begin_layout Standard
Those attributes are the ones that define a job and its features.
 However, there are some others that deal with the way the job is going
 to be executed whether in the CF interface or in MTurk.
 These are important too because they allow us to control some aspects that
 may have some importance for us, the developers.
\end_layout

\begin_layout Itemize

\series bold
CML
\series default
: this is the HTML-like template language that CF works with.
 It has some custom tags where we can place the fields of the job to be
 committed by the workers.
 We'll extend this information later in this section.
\end_layout

\begin_layout Itemize

\series bold
Judgment per unit
\series default
: specifies the quantity of judgments needed for the unit to be closed for
 judgments.
\end_layout

\begin_layout Itemize

\series bold
Max judgments per unit
\series default
: limits the number of judgment a worker can make in the job.
\end_layout

\begin_layout Itemize

\series bold
Units per page
\series default
: this isn't listed in the CF API reference, and is about the number of
 units presented to the worker per page.
\end_layout

\begin_layout Subsection
Job creation through API
\begin_inset CommandInset label
LatexCommand label
name "sub:Job-creation-through"

\end_inset


\end_layout

\begin_layout Standard
We've developed a program that creates a job in CF based on text inputted
 by the user via a text file that is translated with the translation services
 specified by the application.
 As we are doing this programmatically we need to use the API based on REST
 operations.
 In fact, the web UI
\begin_inset Foot
status open

\begin_layout Plain Layout
User Interface
\end_layout

\end_inset

 is based itself on the REST API and every action you perform is converted
 to an API call and its result presented to you in form of an HTML.
\end_layout

\begin_layout Standard
The best way to populate a job through the API is by uploading bulk data
 to the server using the 
\emph on
upload
\emph default

\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://crowdflower.com/docs/api/uploading.html"

\end_inset


\end_layout

\end_inset

 operation to a previously created job.
 As we mentioned before, in the section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:technical-aspects"

\end_inset

, we are going to use JSON as the base of the invocation to services, as
 well as in the reception of server data, so we want to build a well-formated
 JSON to upload all our units into an already created job.
\end_layout

\begin_layout Standard
The JSON used must have all data you are going to use in the job with the
 structure of a Javascript object, like the one shown in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "json-example"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "example.json"
lstparams "breaklines=true,caption={Javascript object},captionpos=b,frame=shadowbox,label={json-example}"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
As we want to upload more than one object we might think the right way to
 do it is forming an array of javascript objects, as the one in Listing
 
\begin_inset CommandInset ref
LatexCommand ref
reference "array-example"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "array-example.json"
lstparams "breaklines=true,caption={Array of javascript objects},captionpos=b,frame=shadowbox,label={array-example}"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
but instead of that, the CF way to do it is without the array syntax, just
 concatenating the Javascript objects without any separator (Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-json-example"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "cf-example.json"
lstparams "breaklines=true,caption={CrowdFlower json syntax},captionpos=b,frame=shadowbox,label={cf-json-example}"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
With everything correctly built we can request an upload to our CF account.
 Instead of showing you a long Java snippet, I will add a cURL test.
 
\end_layout

\begin_layout Standard
For the creation of an empty job CF uses the standard REST way, so we need
 to use the POST method on the job object in the request.
 Every job parameter explained before in this section is included as a query
 parameter in the REST request, but it has a special nomenclature as well.
 In the case of jobs, the parameters must have the word 
\emph on
job
\emph default
 followed by the name of the parameter surrounded by brackets.
 Let's make things clear with the next example (Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-job-creation"

\end_inset

), together with the server response (Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-job-creation-response"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "job-creation.sh"
lstparams "breaklines=true,caption={Creation of an empty job},captionpos=b,frame=shadowbox,label={cf-job-creation},language=sh"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Note that the backslash at the end of the line is a line break, just for
 clarity.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "job-creation-response.js"
lstparams "breaklines=true,caption={Server response to job creation},captionpos=b,frame=shadowbox,label={cf-job-creation-response}"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
NOTE: deliberated omission of JSON attributes due to its length.
\end_layout

\begin_layout Standard
As you can see in the response, the servers answers our request with the
 whole new job formatted as we had specified in the request itself, in our
 case in JSON, with all its fields.
 This can be helpful if we need to storage some information about the newly
 created job, such as the ID, for further changes.
 The most inmediate use of a field of that job is the population of it.
 The next cURL example show us how to attach a JSON file with all our data
 to our new job (Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-job-population"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "job-populating.sh"
lstparams "breaklines=true,caption={Job population},captionpos=b,frame=shadowbox,label={cf-job-population},language=sh"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
After doing this we have to be able to see the units just uploaded in the
 job detail page (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-job-pupulation-web"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cf-job-population.jpg
	width 60page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Detail of units uploaded to a job
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "cf-job-pupulation-web"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
There is an extra parameter in the upload request, namely force, which does
 
\emph on
force
\emph default
 the server to accept all the data that comes in the JSON, even if there
 are inconsistencies in column definition between two different units, e.g.
 when you define two columns in one unit definition and in another you only
 name one.
\end_layout

\begin_layout Subsection
CML
\begin_inset CommandInset label
LatexCommand label
name "sub:CML"

\end_inset


\end_layout

\begin_layout Standard
One important attribute among the above ones is CML.
 It represents the way the job will be displayed to the user.
 It will vary depending on the type of job you're doing and the data you
 need to retrieve from the workers.
 For us, the data needed are two ratings, one stands for fluency of the
 translation and the other stands for adequacy of the translation, per translati
on service.
 I.e., if we have to evaluate three services we will need six ratings.
\end_layout

\begin_layout Standard
There is almost any input tag you could imagine in the CML reference
\begin_inset Foot
status open

\begin_layout Plain Layout
\begin_inset CommandInset href
LatexCommand href
target "http://crowdflower.com/docs/cml"

\end_inset


\end_layout

\end_inset

, from simple textboxes to date inputs, and you can even put some data validatio
n inside those tags, but we only need a tag named 
\series bold
cml:ratings
\series default
.
 We can define the tag in its simplest form (Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "cml-ratings-simple"

\end_inset

), just filling the attributes 
\series bold
label
\series default
, 
\series bold
points
\series default
 and 
\series bold
name
\series default
- which is used to link the user input to a field in the unit spreadsheet.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "cml-ratings-simple.html"
lstparams "breaklines=true,caption={Simple ratings example},captionpos=b,frame=shadowbox,label={cml-ratings-simple},language=HTML"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
This only would print out numbers from 1 to 4 and we also need number 0
 to fill our needs.
 To do so, we can put inside the 
\series bold
cml:ratings
\series default
 tag children tags of the type 
\series bold
cml:rating
\series default
 that have their own labels and values, like the Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "cml-ratings-zero"

\end_inset

 shows.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "cml-ratings-zero.html"
lstparams "breaklines=true,caption={Custom ratings},captionpos=b,frame=shadowbox,label={cml-ratings-zero},language=HTML"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
That string of text is one of the parameters, named CML, passed in the creation
 of the job, but it can be inserted in a user defined standard HTML document
 that can show other kind of static information, using the form 
\series bold
{{field}}
\series default
 the string would be replaced with the data in that column of the unit in
 the spreadsheet.
 With all these things included the CML will look like Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "cml-ratings-zero-gold-data"

\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "cml-ratings-zero-gold-data.html"
lstparams "breaklines=true,caption={Definitive CML with unit data},captionpos=b,frame=shadowbox,label={cml-ratings-zero-gold-data},language=HTML"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Every CML custom tag has its own attributes with which show the data and
 related information, but we are not going to explain them all, this is
 just a short note on how the data is displayed to the user in CF Jobs and
 how we can modify it in our own way.
\end_layout

\begin_layout Section
Gold standards
\end_layout

\begin_layout Standard
We already have talk about units.
 Every JSON object in our file to upload in the last step of the process
 is going to become a unit in the server.
 Therefore a unit is nothing more than a row in the spreadsheet shown in
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-job-pupulation-web"

\end_inset

.
 We aren't creating units one by one through API but all in at once with
 the upload method, as shown before, but there are some important attributes
 that can change the behaviour of the unit.
 For instance, they can become gold standards at some point.
 These gold standards can help us distinguishing the workers that are helpful
 to our task from those who aren't.
 To accomplish that, CF assigns a trust factor to every user working in
 a task, starting that in 100% of trust, and reduces that trust factor every
 time a user fails to answer a golden standard unit.
 Besides, the service shows the right answer of the unit and the reason
 why the unit isn't right answered.
\end_layout

\begin_layout Standard
Those attributes are:
\end_layout

\begin_layout Itemize

\series bold
_golden
\series default
: this attribute tells to the server that that unit could be a a gold standard
 in the future.
\end_layout

\begin_layout Itemize

\series bold
*_gold
\series default
: every column in the spreadsheet with name ending in _gold is an answer
 to the data column name without it.
 I.e., if there is a column named 
\emph on
dataA
\emph default
 and its corresponding answer for the golden standard must be in the column
 
\emph on
dataA_gold
\emph default
 as CF is going to look into that column for the answer when the unit is
 presented to the worker.
 Of course, if the unit is not marked as golden the corresponding cell in
 that row has to be empty.
\end_layout

\begin_layout Itemize

\series bold
*_gold_reason
\series default
: this field specifies the reason of the correct answer to the unit.
 It's the field that will be shown when the user doesn't repond with the
 answer provided in the 
\emph on
*_gold
\emph default
 field.
\end_layout

\begin_layout Standard
Because of the 
\emph on
_golden
\emph default
 attribute is why we need to include the 
\series bold
force
\series default
 parameter in the upload request, as long as we want to upload all units,
 both gold standards and normal ones, at a time.
 That parameter is going to force every unit without the 
\emph on
_golden
\emph default
 attribute to have this column blank in the server spreadsheet.
 As an alternative, we can also set the 
\emph on
_golden
\emph default
 attribute to something different than 
\emph on
TRUE
\emph default
 in the JSON.
\end_layout

\begin_layout Standard
The units uploaded with those attributes won't become golden standards immediate
ly, they just have the information needed for that matter, but they will
 act just as normal units until we change their state.
\end_layout

\begin_layout Subsection
Gold standards & CML
\end_layout

\begin_layout Standard
We've already talked about CML (Subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:CML"

\end_inset

), but we have left one thing out on purpose.
 There is another requirement for units to be capable of become gold standards;
 the columns that will be used to check data against must be linked somehow
 with a CML input tag.
 We need to put one additional simple attribute to the already included,
 the gold attribute set to true.
 If we don't do so, the request to transform the appropriate units to gold
 standards won't do anything.
 That said, let's label units as gold.
\end_layout

\begin_layout Subsection
Gold standards labeling
\end_layout

\begin_layout Standard
As we have mentioned before, units aren't gold until we tell the service
 to do so (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-golden-data-not-labeled"

\end_inset

).
 That can be accomplished with a request on the job, like the one in the
 Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "gold-labeling"

\end_inset

.
 After this we should see in the job detail page, under data tab (Figure
 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-gold-data-labeled"

\end_inset

).
 To do this we are going to repopulate the job with the same data we had
 before but this time we will add some gold data (Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-example-gold"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "cf-example-gold.json"
lstparams "breaklines=true,caption={CrowdFlower JSON with Gold standards data},captionpos=b,frame=shadowbox,label={cf-example-gold}"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "gold-labeling.sh"
lstparams "breaklines=true,caption={Gold labeling request},captionpos=b,frame=shadowbox,label={gold-labeling},language=sh"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The blank data parameter of the request is needed because the server expects
 any quantity of data, even if it's empty data.
 If we want to change the naming convention of 
\emph on
<name_cml>_gold
\emph default
 and 
\emph on
<name_cml>_gold_reason
\emph default
 we can pass to the service the parameters 
\series bold
check
\series default
, which is going to be the name of the CML input that will be checking with
 gold data, and 
\series bold
with
\series default
, which is the gold data column the input will be checking against.
 Although the API reference says that the 
\emph on
check
\emph default
 parameter is mandatory for every gold request it is not, as my snippet
 showed.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cf-data-gold-not-labeled.jpg
	width 60page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Golden units not labeled as golden
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "cf-golden-data-not-labeled"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cf-data-gold-labeled.jpg.jpg
	width 60page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Job data labeled as golden
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "cf-gold-data-labeled"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Orders
\end_layout

\begin_layout Standard
Until now, the only thing we've done is to prepare a job in the CF servers,
 with all its units and gold standards, but the job has never been run.
 To do that we must order the job with the needed judgments per unit, specifying
 some needed attributes, such as the 
\series bold
channels
\series default
 where the job will be posted or the 
\series bold
number of units
\series default
 that are going to be ordered.
\end_layout

\begin_layout Standard
Here comes handy the definition of some parameters that must have been set
 when the job was created (Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Job-creation-through"

\end_inset

), which are called job calibration parameters and they're meant to calculate
 the total amount that your job is going to cost to you.
 Some of those are:
\end_layout

\begin_layout Itemize

\series bold
Seconds per unit
\series default
: the amount of time in seconds that an average user will spend answering
 a single unit.
 With this measure CF calculates the amount of seconds a worker will spend
 in a page of your job, and this is recommended to be less than 
\emph on
four
\emph default
 minutes, ideally less than 
\emph on
two
\emph default
 minutes.
\end_layout

\begin_layout Itemize

\series bold
Payment per page
\series default
: quantity in cents that a worker earns for every 
\emph on
page
\emph default
 (set of units) worked.
 CF recommends that the higher this quantity is the faster the job will
 be finished as it will be more appealing.
\end_layout

\begin_layout Standard
The job is ordered with a request orders on the job, as in Listing 
\begin_inset CommandInset ref
LatexCommand ref
reference "job-ordering"

\end_inset

.
 For testing purposes we are only going to order this 
\emph on
cURL example
\emph default
 job to the internal interface of CF, which by the way is free of charge.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset CommandInset include
LatexCommand lstinputlisting
filename "job-ordering.sh"
lstparams "breaklines=true,caption={Job order example},captionpos=b,frame=shadowbox,label={job-ordering},language=sh"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
If the ordering of the job is successful you must see the job progress on
 the job detail page (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-job-running"

\end_inset

).
 A thing you must be concerned about is that in the API reference, the parameter
 regarding the channels in which the order will take place is named as 
\series bold
channels[]
\series default
 but, as I could see coding it, it actually must be 
\series bold
channels[0]
\series default
, so have that in mind.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cf-job-running.jpg
	width 60page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Job running
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "cf-job-running"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In the bottom of the screenshot it can be seen an url to the internal interface
 of CF.
 You can distribute this url to anyone that has a user in CF as he can be
 a worker on your job, and this can be very useful to parametrize the job
 in a practical way.
 Also in the screenshot we can see some information about the actual state
 of the job, the judgments needed for it to finish and how many of them
 have been untrusted by the use of gold standards.
 Now, I'm going to solve (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-solving"

\end_inset

) this job on my own to see what happens next.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cf-solving.jpg
	width 60page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
This is what the worker will see when solving a unit
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "cf-solving"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
Once the job has received as many judgments as it needs, it will be be finished
 (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-job-finished"

\end_inset

), and we will be able to gather results from it.
 We can also check if the job is either finished or still running in a programma
tically way (Subsection 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Job-state"

\end_inset

).
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cf-job-finished.jpg
	width 60page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Job finished
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "cf-job-finished"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
We can fetch results from the server in a number a formats, such as csv
 and JSON.
 However, in all this document we will get results in a JSON form.
 To get aggregated results from the server we must invoke the method 
\series bold
judgment
\series default
 in the job that is already finished.
 One thing we could probably had found useful is the disaggregated results
 of all the units in one unique JSON.
 This is particularly convenient for the treatment we will give the information,
 which is explained in Section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sec:Cohen's-Kappa-factor"

\end_inset

.
 But the treatment you would give the information is up to you; you can
 transform it the way you want to give the conclusions you are looking for.
\end_layout

\begin_layout Subsection
Job state
\begin_inset CommandInset label
LatexCommand label
name "sub:Job-state"

\end_inset


\end_layout

\begin_layout Standard
The only way I could get to was querying the server to get the entire JSON
 of the job, as in there we can find an attribute named state (Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "cf-state-finished"

\end_inset

).
 The value of this attribute can be 
\series bold
\emph on
finished
\series default
\emph default
, 
\series bold
\emph on
running
\series default
\emph default
, 
\series bold
\emph on
unordered
\series default
\emph default
 or 
\series bold
\emph on
cancelled
\series default
\emph default
 and we can set our trigger to fetch result when that attribute becomes
 
\emph on
finished
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename cf-state-finished.jpg
	width 60page%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Checking state in the job JSON
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "cf-state-finished"

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Cohen's Kappa factor
\begin_inset CommandInset label
LatexCommand label
name "sec:Cohen's-Kappa-factor"

\end_inset


\end_layout

\begin_layout Standard
We already have talked about workers' trust and why we can't surely rely
 on them to have a perfect evaluations.
 But what about trusted workers that don't agree with each other? This is
 uncontrollable until the job is finished because the results may vary from
 one point of the execution of the task to another.
 So it's up to us to check on inter-rater agreement.
\end_layout

\begin_layout Standard
Cohen's Kappa factor is what we need to perform this evaluation with our
 previously gathered results.
 What Cohen's Kappa does is measure statistically the inter-annotator agreement
 taking into account the answers given by each pair of workers.
 With those values we create a table containing them and calculate the probabilt
y of the worker answering randomly and the probabilities of each worker
 answering each possible value given the answer of his pair.
 The measure is calculated with the following formula, being Pr(a) the probabili
ty of the the relative observed agreement among raters and Pr(e) the hypothetica
l probability of chance agreement.
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
K\text{=}\frac{Pr(a)-Pr(e)}{1-Pr(e)}
\]

\end_inset


\end_layout

\end_body
\end_document
